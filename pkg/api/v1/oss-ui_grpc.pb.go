// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OssUIClient is the client API for OssUI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OssUIClient interface {
	// ListNfvoSpecs returns a list of NFV Orchestrator(s) that can be started through the UI.
	ListNfvoSpecs(ctx context.Context, in *ListNfvoSpecsRequest, opts ...grpc.CallOption) (OssUI_ListNfvoSpecsClient, error)
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error)
}

type ossUIClient struct {
	cc grpc.ClientConnInterface
}

func NewOssUIClient(cc grpc.ClientConnInterface) OssUIClient {
	return &ossUIClient{cc}
}

func (c *ossUIClient) ListNfvoSpecs(ctx context.Context, in *ListNfvoSpecsRequest, opts ...grpc.CallOption) (OssUI_ListNfvoSpecsClient, error) {
	stream, err := c.cc.NewStream(ctx, &OssUI_ServiceDesc.Streams[0], "/v1.OssUI/ListNfvoSpecs", opts...)
	if err != nil {
		return nil, err
	}
	x := &ossUIListNfvoSpecsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OssUI_ListNfvoSpecsClient interface {
	Recv() (*ListNfvoSpecsResponse, error)
	grpc.ClientStream
}

type ossUIListNfvoSpecsClient struct {
	grpc.ClientStream
}

func (x *ossUIListNfvoSpecsClient) Recv() (*ListNfvoSpecsResponse, error) {
	m := new(ListNfvoSpecsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ossUIClient) IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error) {
	out := new(IsReadOnlyResponse)
	err := c.cc.Invoke(ctx, "/v1.OssUI/IsReadOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OssUIServer is the server API for OssUI service.
// All implementations must embed UnimplementedOssUIServer
// for forward compatibility
type OssUIServer interface {
	// ListNfvoSpecs returns a list of NFV Orchestrator(s) that can be started through the UI.
	ListNfvoSpecs(*ListNfvoSpecsRequest, OssUI_ListNfvoSpecsServer) error
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error)
	mustEmbedUnimplementedOssUIServer()
}

// UnimplementedOssUIServer must be embedded to have forward compatible implementations.
type UnimplementedOssUIServer struct {
}

func (UnimplementedOssUIServer) ListNfvoSpecs(*ListNfvoSpecsRequest, OssUI_ListNfvoSpecsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNfvoSpecs not implemented")
}
func (UnimplementedOssUIServer) IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReadOnly not implemented")
}
func (UnimplementedOssUIServer) mustEmbedUnimplementedOssUIServer() {}

// UnsafeOssUIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OssUIServer will
// result in compilation errors.
type UnsafeOssUIServer interface {
	mustEmbedUnimplementedOssUIServer()
}

func RegisterOssUIServer(s grpc.ServiceRegistrar, srv OssUIServer) {
	s.RegisterService(&OssUI_ServiceDesc, srv)
}

func _OssUI_ListNfvoSpecs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListNfvoSpecsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OssUIServer).ListNfvoSpecs(m, &ossUIListNfvoSpecsServer{stream})
}

type OssUI_ListNfvoSpecsServer interface {
	Send(*ListNfvoSpecsResponse) error
	grpc.ServerStream
}

type ossUIListNfvoSpecsServer struct {
	grpc.ServerStream
}

func (x *ossUIListNfvoSpecsServer) Send(m *ListNfvoSpecsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OssUI_IsReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReadOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OssUIServer).IsReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OssUI/IsReadOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OssUIServer).IsReadOnly(ctx, req.(*IsReadOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OssUI_ServiceDesc is the grpc.ServiceDesc for OssUI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OssUI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.OssUI",
	HandlerType: (*OssUIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsReadOnly",
			Handler:    _OssUI_IsReadOnly_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListNfvoSpecs",
			Handler:       _OssUI_ListNfvoSpecs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "oss-ui.proto",
}
